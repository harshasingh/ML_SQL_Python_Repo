
-- create
CREATE TABLE EMPLOYEE (
  empId INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  dept TEXT NOT NULL
);

-- insert
INSERT INTO EMPLOYEE VALUES (0001, 'Clark', 'Sales');
INSERT INTO EMPLOYEE VALUES (0002, 'Dave', 'Accounting');
INSERT INTO EMPLOYEE VALUES (0003, 'Ava', 'Sales');

-- fetch 
SELECT * FROM EMPLOYEE WHERE dept = 'Sales';

CREATE TABLE Employees (
	emp_id SERIAL PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50),
	salary DECIMAL(20,2) NOT NULL,
	joining_date VARCHAR(25) NOT NULL,
	department VARCHAR(100)
);

INSERT INTO Employees VALUES (0001, 'Manish', 'Agarwal','700000','2019-04-20 09:00:00','HR');
INSERT INTO Employees VALUES (0002, 'Niranjan', 'Bose','20000','2019-02-11 09:00:00','DA');
INSERT INTO Employees VALUES (0003, 'Vivek', 'Singh','100000','2019-02-11 09:00:00','DA');
INSERT INTO Employees VALUES (0004, 'Asutosh', 'Kapoor','700000','2019-03-20 09:00:00','HR');
INSERT INTO Employees VALUES (0005, 'Vihaan', 'Banerjee','300000','2019-06-11 09:00:00','DA');
INSERT INTO Employees VALUES (0006, 'Atul', 'Diwedi','400000','2019-05-11 09:00:00','Account');
INSERT INTO Employees VALUES (0007, 'Satyendra', 'Tripathi','95000','2019-03-20 09:00:00','Account');
INSERT INTO Employees VALUES (0008, 'Pritika', 'Bhatt','80000','2019-02-11 09:00:00','DA');

	SELECT * FROM Employees;
	--WHERE dept = 'Sales';

CREATE TABLE Variables(
	emp_ref_id integer REFERENCES Employees(emp_id),
	variables_date TIMESTAMP,
	variables_amount DECIMAL(20,2)
);
	
CREATE TABLE Designation(
	emp_ref_id integer REFERENCES Employees(emp_id),
	emp_title VARCHAR(50) NOT NULL,
	affected_from TIMESTAMP
);
INSERT INTO Designation VALUES (0001, 'Asst. Manager', '2019-02-20 00:00:00');
INSERT INTO Designation VALUES (0002, 'Senior Analyst', '2019-02-20 00:00:00');
INSERT INTO Designation VALUES (8, 'Senior Analyst', '2019-04-06 00:00:00');
INSERT INTO Designation VALUES (5, 'Manager', '2019-10-06 00:00:00');
INSERT INTO Designation VALUES (4, 'Asst. Manager', '2019-12-06 00:00:00');
INSERT INTO Designation VALUES (7, 'Team Lead', '2019-06-06 00:00:00');
INSERT INTO Designation VALUES (6, 'Team Lead', '2019-09-06 00:00:00');
INSERT INTO Designation VALUES (3, 'Senior Analyst', '2019-08-06 00:00:00');


INSERT INTO Variables VALUES (1, '2019-02-20 00:00:00', 15000);
INSERT INTO Variables VALUES (2, '2019-06-11 00:00:00', 30000);
INSERT INTO Variables VALUES (3, '2019-02-20 00:00:00', 42000);
INSERT INTO Variables VALUES (4,'2019-02-20 00:00:00',14500);
INSERT INTO Variables VALUES (5	,'2019-06-11 00:00:00',23500);

	SELECT * FROM Variables;
	SELECT * FROM Designation;
	
SELECT Employees.emp_id,first_name,variables_amount
FROM Employees
INNER JOIN Variables ON
Variables.emp_ref_id =  Employees.emp_id;

SELECT CONCAT(first_name," ",last_name) AS fullname,department
FROM employees
WHERE emp_id  = ( SELECT (v1.emp_ref_id)
			FROM variables v1
		 ORDER BY v1.variables_amount  DESC LIMIT 2)
   OR emp_id  = (  SELECT (v2.emp_ref_id)
			FROM variables v2
		 ORDER BY v2.variables_amount LIMIT 1);


 Write a query to get the designation which has got the highest and second lowest amount (salary + variables)  for the whole year of 2019. Get the corresponding amount values.
 
SELECT emp_title,(salary+variables_amount) AS amount
			FROM employees,variables
			INNER JOIN designation d
			ON emp_id = d.emp_ref_id
			WHERE d.affected_from LIKE '2019%'
		 ORDER BY amount  DESC LIMIT 2;
		 
		 
result:
Asst. Manager|742000
Asst. Manager|742000


What is cross join? Write a query to give an example of the same by performing it on the Employees table and Designation table

It returns all the matching records from the tables whether the other table has same or not.It works like a cartesian product each row mapped with all rows of second table

query:
SELECT employees.first_name, designation.emp_title
FROM employees
CROSS JOIN designation
Output
***********************
Manish|Asst. Manager
Manish|Senior Analyst
Manish|Senior Analyst
Manish|Manager
Manish|Asst. Manager
Manish|Team Lead
Manish|Team Lead
Manish|Senior Analyst
Niranjan|Asst. Manager
Niranjan|Senior Analyst
Niranjan|Senior Analyst
Niranjan|Manager
Niranjan|Asst. Manager
Niranjan|Team Lead
Niranjan|Team Lead
Niranjan|Senior Analyst
Vivek|Asst. Manager
Vivek|Senior Analyst
Vivek|Senior Analyst
Vivek|Manager
Vivek|Asst. Manager
Vivek|Team Lead
Vivek|Team Lead
Vivek|Senior Analyst
Asutosh|Asst. Manager
Asutosh|Senior Analyst
Asutosh|Senior Analyst
Asutosh|Manager
Asutosh|Asst. Manager
Asutosh|Team Lead
Asutosh|Team Lead
Asutosh|Senior Analyst
Vihaan|Asst. Manager
Vihaan|Senior Analyst
Vihaan|Senior Analyst
Vihaan|Manager
Vihaan|Asst. Manager
Vihaan|Team Lead
Vihaan|Team Lead
Vihaan|Senior Analyst
Atul|Asst. Manager
Atul|Senior Analyst
Atul|Senior Analyst
Atul|Manager
Atul|Asst. Manager
Atul|Team Lead
Atul|Team Lead
Atul|Senior Analyst
Satyendra|Asst. Manager
Satyendra|Senior Analyst
Satyendra|Senior Analyst
Satyendra|Manager
Satyendra|Asst. Manager
Satyendra|Team Lead
Satyendra|Team Lead
Satyendra|Senior Analyst
Pritika|Asst. Manager
Pritika|Senior Analyst
Pritika|Senior Analyst
Pritika|Manager
Pritika|Asst. Manager
Pritika|Team Lead
Pritika|Team Lead
Pritika|Senior Analyst

What are the clauses used with Select statements and what are the orders of it? Write a query to get the employee details who got their designations updated in the second half of the year 2019(July to December), sorted by the “variables_amount” (highest to lowest) where the department name of the Employee has the letter ‘A’ in it.

Clauses used are :
Select
from
WHERE
Groupby
Having
order by

Execution order of query
FROM --> Where--->Groupby--Having -->SELECT --> DISTINCT-->ORDERBY-->LIMIT


SELECT e.first_name,e.last_name,e.salary,e.joining_date,emp_title,variables_amount,d.emp_title
			FROM employees e
			INNER JOIN designation d
			ON e.emp_id = d.emp_ref_id
			INNER JOIN variables v
			ON e.emp_id = v.emp_ref_id
			WHERE d.affected_from  >='2019-07-01  00:00:00' AND d.affected_from <='2019-12-31  00:00:00' AND d.emp_title LIKE '%A%'
		 ORDER BY variables_amount DESC;
		 
a.  What is Normalization and explain different forms of normalization with examples. (preferable with the above tables)

Normalization is the process to have tables in an organized fashion to adhere to business constraints and logic.
3 types of Normalisation are there:
1ST Normal Form – atomicity, every attribute should comprise of single value and not composite values,if composite separate them into separate columns
2ND Normal Form – any table in 1NF should not have partial dependency in cases of composite primary keys this violates
3rd Normal Form – Transient Dependency – the attributes other than primary key columns should not have any sort of dependency on other non primary attributes

What is the stored procedure? Write a stored procedure to call the query that you have written for Q2.a

I would define stored procedures as set of SQL statements which can be called as part of a function call allowing us to maintain concisely and also help with reusability 
*******

CREATE PROCEDURE get_high_low()
BEGIN
    SELECT CONCAT(first_name," ",last_name) AS fullname,department
FROM employees
WHERE emp_id  = ( SELECT (v1.emp_ref_id)
			FROM variables v1
		 ORDER BY v1.variables_amount  DESC LIMIT 2)
   OR emp_id  = (  SELECT (v2.emp_ref_id)
			FROM variables v2
		 ORDER BY v2.variables_amount LIMIT 1);
END

*****Call procedure with below:
CALL get_high_low
		 


